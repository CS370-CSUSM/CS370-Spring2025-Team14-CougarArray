package com.cougararray.TCPWebsocket;

import java.net.URI;

import org.java_websocket.client.WebSocketClient;
import org.java_websocket.handshake.ServerHandshake;

import com.cougararray.OutputT.Output;
import com.cougararray.OutputT.Status;


//NOTE! A MAJORITY OF CODE WAS GENERATED BY GPT
//This is because I didn't feel like implementating something that's already done in the same fashion on the internet several times
public class WebsocketSenderClient {

    private static WebSocketClient client;

    public static void sendPing(String server) {
        try {
            if (client == null || !client.isOpen()) {
                connectToServer("ws://" + server);
            }

            if (client != null && client.isOpen()) {
                client.send("ping");
                Output.print("Ping", Status.GOOD);
            } else {
                Output.print("Client not connected. Could not send message.", Status.BAD);
            }
        } catch (Exception e) {
            Output.print("Error sending message: " + e.getMessage(), Status.BAD);
            e.printStackTrace();
        }
    }

    // Static method to connect to the WebSocket server
    private static void connectToServer(String serverURI) {
        try {
            client = new WebSocketClient(new URI(serverURI)) {
                @Override
                public void onOpen(ServerHandshake handshakedata) {
                    Output.print("Connected to WebSocket server!", Status.GOOD);
                }

                @Override
                public void onMessage(String message) {
                    Output.print("Received from server: " + message);
                }

                @Override
                public void onClose(int code, String reason, boolean remote) {
                    Output.print("Connection closed.", Status.BAD);
                }

                @Override
                public void onError(Exception ex) {
                    Output.print("WebSocket error", Status.BAD);
                    ex.printStackTrace();
                }
            };

            client.connectBlocking(); // Wait for the connection to complete
        } catch (Exception e) {
            Output.print("Error connecting to WebSocket server: " + e.getMessage(), Status.BAD);
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        // WebSocket server URI (Make sure your WebSocket server is running on this port)
        String serverURI = "localhost:8000"; 

        // Send the message using WebsocketSender
        WebsocketSenderClient.sendPing(serverURI);
    }
    
}
