package com.cougararray.TCPWebsocket;

import java.net.InetSocketAddress;

import org.java_websocket.WebSocket;
import org.java_websocket.handshake.ClientHandshake;
import org.java_websocket.server.WebSocketServer;

import com.cougararray.OutputT.Output;
import com.cougararray.OutputT.Status;



//A lot of the information founded for using websockets can be founded here: https://www.geeksforgeeks.org/java-net-socket-class-in-java/
//ServerSocket is for SERVER side tasks (for receiving stuff)
//Socket is for CLIENT side tasks (for sending stuff)
public class WebsocketListener extends Thread{

    protected int port;
    protected WebSocketServer server;

    public WebsocketListener(int port){
        this.port = port;
    }

    //extension of Thread
    public void run(){
        listen();
    }
    
    protected void listen(){
        Output.print("Starting WebSocket Receiver on port " + port, Status.GOOD);

        server = new WebSocketServer(new InetSocketAddress("0.0.0.0", port)) {
            @Override
            public void onMessage(WebSocket conn, String message) {
                Output.print("Received: " + message);
                conn.send("Message received: " + message);
            }


            //GENERATED BY org.java_websocket
            @Override
            public void onOpen(WebSocket conn, ClientHandshake handshake) {
                // TODO Auto-generated method stub; handle when socket is opened
                // implementing simple output if necessary, but could also handle logging/other tasks
                Output.print("Connection established: " + conn.getRemoteSocketAddress().toString(), Status.GOOD);
                // throw new UnsupportedOperationException("Unimplemented method 'onOpen'");
            }

            @Override
            public void onClose(WebSocket conn, int code, String reason, boolean remote) {
                // TODO Auto-generated method stub; handle when socket is closed
                // output when connection is closed; TODO implement reason for closing connection
                Output.print("Connection closed: " + conn.getRemoteSocketAddress().toString() + " Reason: " + reason, Status.INFO);
                // throw new UnsupportedOperationException("Unimplemented method 'onClose'");
            }

            @Override
            public void onError(WebSocket conn, Exception ex) {
                // TODO Auto-generated method stub; handle potential errors (generalized)
                // outputting provided error message; could also retry x times or just notify user
                Output.print("Error with connection: " + conn.getRemoteSocketAddress().toString() + " :" + ex.getMessage(), Status.ERROR);
                // throw new UnsupportedOperationException("Unimplemented method 'onError'");
            }

            @Override
            public void onStart() {
                // TODO Auto-generated method stub; handle actions when Websocket server starts
                // not sure on ideas to implement other things here, but I'll leave an output just in case
                Output.print("WebSocket Server started...", Status.GOOD);
                return;
            }            
        };

        server.start();
    }


    //To test Websocket; you can write Websocket.java itself and see if it can send a message to itself.
    //Ideally, if you are to execute Main.java, this code is NOT executed. If you executed Websocket.java then this code is executed.
    //This is helpful for testing purposes.

    //@TODO!
    //Better Logging; I feel like to a new user, they have 0 idea what any of this is...
    //Better documentation
    public static void main(String args[]) {

        int port = 6999; // default test port

        WebsocketListener websocketListener = new WebsocketListener(port);
        websocketListener.start();

        WebsocketSenderClient.sendPing("127.0.0.1:6999");
        WebsocketSenderClient.sendMessage("127.0.0.1:6999", "Hi!");

    }
}
